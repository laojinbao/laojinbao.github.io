<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于php调用shell权限问题</title>
    <url>/2017/04/28/%E5%85%B3%E4%BA%8Ephp%E8%B0%83%E7%94%A8shell%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>开发项目的的过程之中，php通过shell_exec()函数调用shell脚本，结果发现没有脚本反应（也没有错误反馈），排除了代码上的问题。</p>
<h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>原有代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cmd</span> = <span class="string">&#x27;sh ./ng_config.sh&#x27;</span>; </span><br><span class="line"><span class="variable">$result</span> = shell_exec(<span class="variable">$cmd</span>);</span><br></pre></td></tr></table></figure>

<p>修改后代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo &#x27;sh ./ng_config.sh 2&gt;&amp;1&#x27;;</span><br><span class="line">exec($cmd, $output, $return_val);</span><br></pre></td></tr></table></figure>

<p>由于nginx设置的用户是www，没有办法看到权限高的错误返回信息，加上2&gt;&amp;1(将一个标准错误输出重定向到标准输出)之后,打印$output即可看到错误返回：权限不足，无法打开脚本的相关信息</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>既然知道了问题为权限不足，那么问题就是要解决php权限问题：</p>
<ul>
<li><p>编辑/etc/sudoers</p>
</li>
<li><p>加入www ALL=NOPASSWD:ALL</p>
</li>
<li><p>重启nginx</p>
</li>
</ul>
<p>重新执行程序了，发现shell脚本就可以正常执行</p>
<p>ps：除非业务需求尽量不要去修改nginx的用户权限，有很高的安全风险。</p>
]]></content>
      <tags>
        <tag>php,shell</tag>
      </tags>
  </entry>
  <entry>
    <title>连接Mysql提示Can’t connect to local MySQL server through socket的解决方法</title>
    <url>/2017/04/28/%E8%BF%9E%E6%8E%A5Mysql%E6%8F%90%E7%A4%BACan%E2%80%99t%20connect%20to%20local%20MySQL%20server%20through%20socket%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="在新环境测试项目的时候突然爆出了下面提示错误："><a href="#在新环境测试项目的时候突然爆出了下面提示错误：" class="headerlink" title="在新环境测试项目的时候突然爆出了下面提示错误："></a>在新环境测试项目的时候突然爆出了下面提示错误：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can<span class="string">&#x27;t connect to local MySQL server through socket &#x27;</span>/var/lib/mysql/mysql.sock<span class="string">&#x27; (2)</span></span><br></pre></td></tr></table></figure>

<p>产生问题的一般有两种情况：</p>
<h3 id="mysql服务未正常启动"><a href="#mysql服务未正常启动" class="headerlink" title="mysql服务未正常启动"></a>mysql服务未正常启动</h3><p>由于mysql的socket文件是由mysqld服务启动时创建的，如果mysqld服务未正常启动，socket文件自然也不会被创建，当然会找不到socket文件了。解决办法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启服务器 </span></span><br><span class="line">[root@php54 conf]<span class="comment"># service nginx restart</span></span><br></pre></td></tr></table></figure>

<h3 id="socket文件路径在配置文件中设置不完整："><a href="#socket文件路径在配置文件中设置不完整：" class="headerlink" title="socket文件路径在配置文件中设置不完整："></a>socket文件路径在配置文件中设置不完整：</h3><p>假如mysql可以正常连接，使用php的mysql_connect函数却连接不了mysql，那就是配置文件出现问题(重装mysql，或者修改了my.cnf文件)，解决办法需要们修改/php.ini文件:<br>在php.ini文件中”[MySQL]”项下找到”mysql.default_socket”，并设置其值指向正确的mysql服务socket文件即可，如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[MySQL]</span><br><span class="line">.......</span><br><span class="line">mysql.default_socket = <span class="string">&quot;/var/lib/mysql/mysql.sock&quot;</span></span><br></pre></td></tr></table></figure>

<p>同理，如果你环境配置支持mysqli或者pdo，也要相应的修改该路径</p>
]]></content>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>XHprof+XHGui性能分析</title>
    <url>/2017/05/02/XHprof+XHGui%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>XHProf是一个分层PHP性能分析工具。它报告函数级别的请求次数和各种指标，包括阻塞时间，CPU时间和内存使用情况。一个函数的开销，可细分成调用者和被调用者的开销，XHProf数据收集阶段，它记录调用次数的追踪和包容性的指标弧在动态callgraph的一个程序。它独有的数据计算的报告/后处理阶段。在数据收集时，XHProfd通过检测循环来处理递归的函数调用，并通过给递归调用中每个深度的调用一个有用的命名来避开死循环。XHProf分析报告有助于理解被执行的代码的结构，它有一个简单的HTML的用户界面（ PHP写成的）。基于浏览器的性能分析用户界面能更容易查看，或是与同行们分享成果。也能绘制调用关系图。  </p>
<h3 id="Xhprof-Xhgui"><a href="#Xhprof-Xhgui" class="headerlink" title="Xhprof + Xhgui"></a>Xhprof + Xhgui</h3><p>Xhprof 由 Facebook 开发的，包含一个基本的用户界面用于查看性能数据。此外，Paul Reinheimer 开发了 Xhgui 和一个增强的用户界面（UI）用于查看、比较和分析性能数据。</p>
<p>环境要求：php&gt;=5.5</p>
<h3 id="安装-XHProf"><a href="#安装-XHProf" class="headerlink" title="安装 XHProf"></a>安装 XHProf</h3><p>Xhprof 可通过 PECL 安装，步骤如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pecl install channel://pecl.php.net/xhprof-0.9.4</span><br></pre></td></tr></table></figure>

<p>安装完毕之后在 php.ini 中加入响应配置：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extension=xhprof.so</span><br></pre></td></tr></table></figure>

<p>重启 php-fpm或者apache即可</p>
<h3 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><p>客户端安装  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mongodb <span class="comment">#安装mongodb客户端</span></span><br></pre></td></tr></table></figure>

<p>针对PHP的Mongo驱动:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pecl install mongo</span><br></pre></td></tr></table></figure>

<p>安装完毕之后在 php.ini 中加入响应配置：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extension=mongo.so</span><br></pre></td></tr></table></figure>

<p>mongo加索引</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongo  </span><br><span class="line">&lt; use xhprof  </span><br><span class="line">&lt; db.results.ensureIndex( &#123; ‘meta.SERVER.REQUEST_TIME’ : -1 &#125; )  </span><br><span class="line">&lt; db.results.ensureIndex( &#123; ‘profile.main().wt’ : -1 &#125; )  </span><br><span class="line">&lt; db.results.ensureIndex( &#123; ‘profile.main().mu’ : -1 &#125; )  </span><br><span class="line">&lt; db.results.ensureIndex( &#123; ‘profile.main().cpu’ : -1 &#125; )  </span><br><span class="line">&lt; db.results.ensureIndex( &#123; ‘meta.url’ : 1 &#125; )</span><br></pre></td></tr></table></figure>

<h3 id="安装XHGui"><a href="#安装XHGui" class="headerlink" title="安装XHGui"></a>安装XHGui</h3><p>安装 Xhgui，必须直接从 git 获取。该项目可以在 github 上找到，地址为 <a href="https://github.com/perftools/xhgui">https://github.com/perftools/xhgui</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/perftools/xhgui.git</span><br><span class="line">$ <span class="built_in">cd</span> xhgui</span><br><span class="line">$ php install.php</span><br></pre></td></tr></table></figure>

<p>最后一个命令是运行 composer 以安装依赖并检查 xhgui 缓存目录的权限。如果失败，你可以手动运行 composer install</p>
<h3 id="运行性能分析器s"><a href="#运行性能分析器s" class="headerlink" title="运行性能分析器s"></a>运行性能分析器s</h3><p>运行分析器时，你需要在待分析的所有页面包含 external/header.php 脚本。为此，你可以在 PHP ini 文件设置 auto_prepend_file 。你既可以直接在公共 INI 文件进行设置，也可以限制到单一的虚拟主机(nginx或者apache)。</p>
<p>对于 Nginx 服务器，在服务器配置中添加以下代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastcgi_param PHP_VALUE “auto_prepend_file=/home/www/xhgui/external/header.php”;</span><br></pre></td></tr></table></figure>

<p>默认情况下,分析器运行时只分析(大约)1%的请求。这是由以下 external/header.php 代码控制的:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (rand(<span class="number">0</span>, <span class="number">100</span>) !== <span class="number">42</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">只需修改该段代码即可控制返回请求量的百分比，减轻线上服务器压力，至此整个安装过程结束  </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XHGui,XHprof</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库设计中的14个技巧</title>
    <url>/2017/05/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%8414%E4%B8%AA%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>下述十四个技巧，是许多人在大量的数据库分析与设计实践中，逐步总结出来的。对于这些经验的运用，读者不能生帮硬套，死记硬背，而要消化理解，实事求是，灵活掌握。并逐步做到：在应用中发展，在发展中应用。</p>
<h3 id="1-原始单据与实体之间的关系"><a href="#1-原始单据与实体之间的关系" class="headerlink" title="1. 原始单据与实体之间的关系"></a>1. 原始单据与实体之间的关系</h3><p>　　可以是一对一、一对多、多对多的关系。在一般情况下，它们是一对一的关系：即一张原始单据对应且只对应一个实体。在特殊情况下，它们可能是一对多或多对一的关系，即一张原始单证对应多个实体，或多张原始单证对应一个实体。这里的实体可以理解为基本表。明确这种对应关系后，对我们设计录入界面大有好处。<br>　　〖例1〗：一份员工履历资料，在人力资源信息系统中，就对应三个基本表：员工基本情况表、社会关系表、工作简历表。这就是“一张原始单证对应多个实体”的典型例子。  </p>
<h3 id="2-主键与外键"><a href="#2-主键与外键" class="headerlink" title="2. 主键与外键"></a>2. 主键与外键</h3><p>　　一般而言，一个实体不能既无主键又无外键。在 E–R图 中, 处于叶子部位的实体，可以定义主键，也可以不定义主键(因为它无子孙), 但必须要有外键(因为它有父亲)。<br>　　主键与外键的设计，在全局数据库的设计中，占有重要地位。当全局数据库的设计完成以后，有个美国数据库设计专家说：“键，到处都是键，除了键之外，什么也没有”，这就是他的数据库设计经验之谈，也反映了他对信息系统核心(数据模型)的高度抽象思想。因为：主键是实体的高度抽象，主键与外键的配对，表示实体之间的连接。</p>
<h3 id="3-基本表的性质"><a href="#3-基本表的性质" class="headerlink" title="3. 基本表的性质"></a>3. 基本表的性质</h3><p>　　基本表与中间表、临时表不同，因为它具有如下四个特性：<br>　　(1) 原子性。基本表中的字段是不可再分解的。<br>　　(2) 原始性。基本表中的记录是原始数据(基础数据)的记录。<br>　　(3) 演绎性。由基本表与代码表中的数据，可以派生出所有的输出数据。<br>　　(4) 稳定性。基本表的结构是相对稳定的，表中的记录是要长期保存的。<br>　　理解基本表的性质后，在设计数据库时，就能将基本表与中间表、临时表区分开来。</p>
<h3 id="4-范式标准"><a href="#4-范式标准" class="headerlink" title="4. 范式标准"></a>4. 范式标准</h3><p>　　基本表及其字段之间的关系, 应尽量满足第三范式。但是，满足第三范式的数据库设计，往往不是最好的设计。为了提高数据库的运行效率，常常需要降低范式标准：适当增加冗余，达到以空间换时间的目的。<br>　　〖例2〗：有一张存放商品的基本表，如 表1 所示。“金额”这个字段的存在，表明该表的设计不满足第三范式，因为“金额”可以由“单价”乘以“数量”得到，说明“金额”是冗余字段。但是，增加“金额”这个冗余字段，可以提高查询统计的速度，这就是 以空间换时间 的作法。<br>　　在Rose 2002中，规定列有两种类型：数据列和计算列。“金额”这样的列被称为“计算列”，而“单价”和“数量”这样的列被称为“数据列”。<br>表1 商品表的表结构 ：</p>
<table>
<thead>
<tr>
<th>商品名称</th>
<th>商品型号</th>
<th>单价</th>
<th>数量</th>
<th>金额</th>
</tr>
</thead>
<tbody><tr>
<td>电视机</td>
<td>29c</td>
<td>2,500</td>
<td>40</td>
<td>100,000</td>
</tr>
</tbody></table>
<h3 id="5-通俗地理解三个范式"><a href="#5-通俗地理解三个范式" class="headerlink" title="5. 通俗地理解三个范式"></a>5. 通俗地理解三个范式</h3><p>　　通俗地理解三个范式，对于数据库设计大有好处。在数据库设计中，为了更好地应用三个范式，就必须通俗地理解三个范式(通俗地理解是够用的理解，并不是最科学最准确的理解)：<br>　　第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解;<br>　　第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性;<br>　　第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余.<br>　　没有冗余的数据库设计可以做到。但是，没有冗余的数据库未必是最好的数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。</p>
<h3 id="6-要善于识别与正确处理多对多的关系"><a href="#6-要善于识别与正确处理多对多的关系" class="headerlink" title="6. 要善于识别与正确处理多对多的关系"></a>6. 要善于识别与正确处理多对多的关系</h3><p>　　若两个实体之间存在多对多的关系，则应消除这种关系。消除的办法是，在两者之间增加第三个实体。这样，原来一个多对多的关系，现在变为两个一对多的关系。要将原来两个实体的属性合理地分配到三个实体中去。这里的第三个实体，实质上是一个较复杂的关系，它对应一张基本表。一般来讲，数据库设计工具不能识别多对多的关系，但能处理多对多的关系。一旦有多对多，就要建第三条表。<br>　　〖例3〗：在“图书馆信息系统”中，“图书”是一个实体，“读者”也是一个实体。这两个实体之间的关系，是一个典型的多对多关系：一本图书在不同时间可以被多个读者借阅，一个读者又可以借多本图书。为此，要在二者之间增加第三个实体，该实体取名为“借还书”，它的属性为：借还时间、借还标志(0表示借书，1表示还书)，另外，它还应该有两个外键(“图书”的主键，“读者”的主键)，使它能与“图书”和“读者”连接。</p>
<h3 id="7-主键PK的取值方法"><a href="#7-主键PK的取值方法" class="headerlink" title="7. 主键PK的取值方法"></a>7. 主键PK的取值方法</h3><p>　　PK是供程序员使用的表间连接工具，可以是一无物理意义的数字串, 由程序自动加1来实现。也可以是有物理意义的字段名或字段名的组合。不过前者比后者好。当PK是字段名的组合时，建议字段的个数不要太多，多了不但索引占用空间大，而且速度也慢。</p>
<h3 id="8-正确认识数据冗余"><a href="#8-正确认识数据冗余" class="headerlink" title="8. 正确认识数据冗余"></a>8. 正确认识数据冗余</h3><p>　　主键与外键在多表中的重复出现, 不属于数据冗余，这个概念必须清楚，事实上有许多人还不清楚。非键字段的重复出现, 才是数据冗余！而且是一种低级冗余，即重复性的冗余。高级冗余不是字段的重复出现，而是字段的派生出现。<br>　　〖例4〗：商品中的“单价、数量、金额”三个字段，“金额”就是由“单价”乘以“数量”派生出来的，它就是冗余，而且是一种高级冗余。冗余的目的是为了提高处理速度。只有低级冗余才会增加数据的不一致性，因为同一数据，可能从不同时间、地点、角色上多次录入。因此，我们提倡高级冗余(派生性冗余)，反对低级冗余(重复性冗余)。</p>
<h3 id="9-E–R图没有标准答案"><a href="#9-E–R图没有标准答案" class="headerlink" title="9. E–R图没有标准答案"></a>9. E–R图没有标准答案</h3><p>　　信息系统的 E–R图 没有标准答案，因为它的设计与画法不是惟一的，只要它覆盖了系统需求的业务范围和功能内容，就是可行的。反之要修改E–R图。尽管它没有惟一的标准答案，并不意味着可以随意设计。好的E–R图的标准是：结构清晰、关联简洁、实体个数适中、属性分配合理、没有低级冗余。</p>
<h3 id="10-视图技术在数据库设计中很有用"><a href="#10-视图技术在数据库设计中很有用" class="headerlink" title="10. 视图技术在数据库设计中很有用"></a>10. 视图技术在数据库设计中很有用</h3><p>　　与基本表、代码表、中间表不同，视图是一种虚表，它依赖数据源的实表而存在。视图是供程序员使用数据库的一个窗口，是基表数据综合的一种形式, 是数据处理的一种方法，是用户数据保密的一种手段。为了进行复杂处理、提高运算速度和节省存储空间, 视图的定义深度一般不得超过三层。 若三层视图仍不够用, 则应在视图上定义临时表, 在临时表上再定义视图。这样反复交迭定义, 视图的深度就不受限制了。<br>　　对于某些与国家政治、经济、技术、军事和安全利益有关的信息系统，视图的作用更加重要。这些系统的基本表完成物理设计之后，立即在基本表上建立第一层视图，这层视图的个数和结构，与基本表的个数和结构是完全相同。并且规定，所有的程序员，一律只准在视图上操作。只有数据库管理员，带着多个人员共同掌握的“安全钥匙”，才能直接在基本表上操作。请读者想想：这是为什么?</p>
<h3 id="11-中间表、报表和临时表"><a href="#11-中间表、报表和临时表" class="headerlink" title="11. 中间表、报表和临时表"></a>11. 中间表、报表和临时表</h3><p>　　中间表是存放统计数据的表，它是为数据仓库、输出报表或查询结果而设计的，有时它没有主键与外键(数据仓库除外)。临时表是程序员个人设计的，存放临时记录，为个人所用。基表和中间表由DBA维护，临时表由程序员自己用程序自动维护。</p>
<h3 id="12-完整性约束表现在三个方面"><a href="#12-完整性约束表现在三个方面" class="headerlink" title="12. 完整性约束表现在三个方面"></a>12. 完整性约束表现在三个方面</h3><p>　　域的完整性：用Check来实现约束，在数据库设计工具中，对字段的取值范围进行定义时，有一个Check按钮，通过它定义字段的值城。参照完整性：用PK、FK、表级触发器来实现。用户定义完整性：它是一些业务规则，用存储过程和触发器来实现。</p>
<h3 id="13-防止数据库设计打补丁的方法是“三少原则”"><a href="#13-防止数据库设计打补丁的方法是“三少原则”" class="headerlink" title="13. 防止数据库设计打补丁的方法是“三少原则”"></a>13. 防止数据库设计打补丁的方法是“三少原则”</h3><p>　　(1) 一个数据库中表的个数越少越好。只有表的个数少了，才能说明系统的E–R图少而精，去掉了重复的多余的实体，形成了对客观世界的高度抽象，进行了系统的数据集成，防止了打补丁式的设计;<br>　　(2) 一个表中组合主键的字段个数越少越好。因为主键的作用，一是建主键索引，二是做为子表的外键，所以组合主键的字段个数少了，不仅节省了运行时间，而且节省了索引存储空间;<br>　　(3) 一个表中的字段个数越少越好。只有字段的个数少了，才能说明在系统中不存在数据重复，且很少有数据冗余，更重要的是督促读者学会“列变行”，这样就防止了将子表中的字段拉入到主表中去，在主表中留下许多空余的字段。所谓“列变行”，就是将主表中的一部分内容拉出去，另外单独建一个子表。这个方法很简单，有的人就是不习惯、不采纳、不执行。<br>　　数据库设计的实用原则是：在数据冗余和处理速度之间找到合适的平衡点。“三少”是一个整体概念，综合观点，不能孤立某一个原则。该原则是相对的，不是绝对的。“三多”原则肯定是错误的。试想：若覆盖系统同样的功能，一百个实体(共一千个属性) 的E–R图，肯定比二百个实体(共二千个属性) 的E–R图，要好得多。<br>　　提倡“三少”原则，是叫读者学会利用数据库设计技术进行系统的数据集成。数据集成的步骤是将文件系统集成为应用数据库，将应用数据库集成为主题数据库，将主题数据库集成为全局综合数据库。集成的程度越高，数据共享性就越强，信息孤岛现象就越少，整个企业信息系统的全局E–R图中实体的个数、主键的个数、属性的个数就会越少。<br>　　提倡“三少”原则的目的，是防止读者利用打补丁技术，不断地对数据库进行增删改，使企业数据库变成了随意设计数据库表的“垃圾堆”，或数据库表的“大杂院”，最后造成数据库中的基本表、代码表、中间表、临时表杂乱无章，不计其数，导致企事业单位的信息系统无法维护而瘫痪。<br>　　“三多”原则任何人都可以做到，该原则是“打补丁方法”设计数据库的歪理学说。“三少”原则是少而精的原则，它要求有较高的数据库设计技巧与艺术，不是任何人都能做到的，因为该原则是杜绝用“打补丁方法”设计数据库的理论依据。</p>
<h3 id="14-提高数据库运行效率的办法"><a href="#14-提高数据库运行效率的办法" class="headerlink" title="14. 提高数据库运行效率的办法"></a>14. 提高数据库运行效率的办法</h3><p>　　在给定的系统硬件和系统软件条件下，提高数据库系统的运行效率的办法是：<br>　　(1) 在数据库物理设计时，降低范式，增加冗余, 少用触发器, 多用存储过程。<br>　　(2) 当计算非常复杂、而且记录条数非常巨大时(例如一千万条)，复杂计算要先在数据库外面，以文件系统方式用C++语言计算处理完成之后，最后才入库追加到表中去。这是电信计费系统设计的经验。<br>　　(3) 发现某个表的记录太多，例如超过一千万条，则要对该表进行水平分割。水平分割的做法是，以该表主键PK的某个值为界线，将该表的记录水平分割为两个表。若发现某个表的字段太多，例如超过八十个，则垂直分割该表，将原来的一个表分解为两个表。<br>　　(4) 对数据库管理系统DBMS进行系统优化，即优化各种系统参数，如缓冲区个数。<br>　　(5) 在使用面向数据的SQL语言进行程序设计时，尽量采取优化算法。<br>　　总之，要提高数据库的运行效率，必须从数据库系统级优化、数据库设计级优化、程序实现级优化，这三个层次上同时下功夫。</p>
]]></content>
  </entry>
  <entry>
    <title>Nginx反向代理、负载均衡等功能简单实现配置</title>
    <url>/2017/05/12/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E3%80%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%89%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h3><p>VirtualBox/vagrant<br>Centos6.6<br>nginx1.11.1<br>IP对应的机器名：</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>角色名</th>
</tr>
</thead>
<tbody><tr>
<td>10.1.10.92</td>
<td>client</td>
</tr>
<tr>
<td>192.168.33.10</td>
<td>nginx server</td>
</tr>
<tr>
<td>192.168.33.11</td>
<td>web server 1</td>
</tr>
<tr>
<td>192.168.33.12</td>
<td>web server 2</td>
</tr>
</tbody></table>
<h3 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h3><p>测试代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@12 ~]<span class="comment"># echo &quot;&lt;html&gt;192.168.33.11&lt;/html&gt;&quot; &gt; /home/www/html/index.html  </span></span><br><span class="line">[root@11~]<span class="comment"># echo &quot;&lt;html&gt;192.168.33.12&lt;/html&gt;&quot; &gt; /home/www/html/index.html</span></span><br></pre></td></tr></table></figure>

<p>测试结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@92]<span class="comment"># curl 192.168.33.11  </span></span><br><span class="line">&lt;html&gt;  </span><br><span class="line">192.168.33.11 </span><br><span class="line">&lt;/html&gt;  </span><br><span class="line">[root@92]<span class="comment"># curl 192.168.33.12 </span></span><br><span class="line">&lt;html&gt;  </span><br><span class="line">192.168.33.12  </span><br><span class="line">&lt;/html&gt;   </span><br><span class="line"><span class="comment">##都成功了，我们进行下一步。</span></span><br></pre></td></tr></table></figure>

<p>nginx.conf 配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">    listen       80;  </span><br><span class="line">    server_name  192.168.33.10; <span class="comment">#根据环境介绍，nginx server ip  </span></span><br><span class="line">  </span><br><span class="line">    location / &#123;  </span><br><span class="line">           proxy_pass http://192.168.33.11; <span class="comment">#被代理的服务器ip  </span></span><br><span class="line">                &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">#这个参数设置被代理服务器的地址和被映射的URL，地址可以使主机名、域名、IP加端口的模式，如：  </span></span><br><span class="line"><span class="comment">#proxy_pass    http://192.168.1.6:8099/linuxtone/;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重启nginx,测试结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@92 ~]<span class="comment"># curl 192.168.33.10    #访问反向代理服务器  </span></span><br><span class="line">&lt;html&gt;  </span><br><span class="line">192.168.33.11                  </span><br><span class="line">&lt;/html&gt;  </span><br><span class="line"><span class="comment">#我们看到访问代理服务器，结果被转发到了web server1上。</span></span><br></pre></td></tr></table></figure>

<p>分析nginx server和web server1的nginx日志，结果发现访问ip地址分别为10.1.10.92和192.168.33.10。<br>说白了反向代理，对客户来说nginx-server就是真正的服务器，实际上，当用户访问nginx-server的时候，会将请求转发到web-server1上，然后web-server1将请求的结果发给nginx-server，然后由nginx-server将请求的结果转交给用户。<br>如果才能显示真正的用户的真正ip地址，而不是反代的ip地址呢？ 配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">    listen       80;  </span><br><span class="line">    server_name  192.168.33.10;    <span class="comment">#根据环境介绍，nginx server ip  </span></span><br><span class="line">  </span><br><span class="line">    location / &#123;  </span><br><span class="line">           proxy_pass http://192.168.33.11;    <span class="comment">#被代理的服务器ip  </span></span><br><span class="line">           proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">           proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">           proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;  </span><br><span class="line">                 &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个反向代理结束</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>配置介绍：<br>1.upstream是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。通过upstream指令指定了一个负载均衡器的名称xxxx。这个名称可以任意指定，在后面需要用到的地方直接调用即可。</p>
<p>2.Nginx的负载均衡模块目前支持4种调度算法，下面进行分别介绍，其中后两项属于第三方调度算法。</p>
<ul>
<li>轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。Weight 指定轮询权值，Weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</li>
<li>ip_hash。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。</li>
<li>fair。这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。</li>
<li>url_hash。此方法按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。<br>配置如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;  </span><br><span class="line">    include       /etc/nginx/mime.types;  </span><br><span class="line">    default_type  application/octet-stream;  </span><br><span class="line">  </span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span>  </span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span>  </span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;  </span><br><span class="line">  </span><br><span class="line">    sendfile        on;  </span><br><span class="line">    <span class="comment">#tcp_nopush     on;  </span></span><br><span class="line">  </span><br><span class="line">    keepalive_timeout  65;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">#gzip  on;  </span></span><br><span class="line">upstream <span class="built_in">test</span> &#123;  </span><br><span class="line">    server 192.168.33.11:80;  </span><br><span class="line">    server 192.168.33.12:80;  </span><br><span class="line">    &#125;  </span><br><span class="line">service &#123;</span><br><span class="line">    server &#123;  </span><br><span class="line">    listen       80;  </span><br><span class="line">    server_name  192.168.33.10;    <span class="comment">#根据环境介绍，nginx server ip  </span></span><br><span class="line">  </span><br><span class="line">    location / &#123;  </span><br><span class="line">           proxy_pass http://<span class="built_in">test</span>;    <span class="comment">#被代理的服务器ip  </span></span><br><span class="line">           proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">           proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">           proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;  </span><br><span class="line">                 &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">#注，upstream是定义在server&#123; &#125;之外的，不能定义在server&#123; &#125;内部。定义好upstream之后，用proxy_pass引用一下即可。</span></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>nginx,负载均衡</tag>
      </tags>
  </entry>
</search>
